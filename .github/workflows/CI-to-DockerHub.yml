
name: CI to Docker Hub

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]


jobs:

  Build:
    runs-on: ubuntu-18.04
    
    steps:
      - name: Check Out Repo 
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push service1
        id: docker_build1
        uses: docker/build-push-action@v2
        with:
          context: ./service1/
          file: ./service1/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/service1:2.0
          
      - name: Build and push service2
        id: docker_build2
        uses: docker/build-push-action@v2
        with:
          context: ./service2/
          file: ./service1/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/service2:2.6
          
  Publish_Artifact:         
    needs: Build 
    runs-on: ubuntu-18.04
    
    steps:      
      - name: Create a temporary artifact downloads folder
        run: mkdir downloads   
        
      - name: Add artifacts to publish to the temp folder (Run Unit, Integration Test)       
        run: |
          cd downloads
          echo "Unit Test passed" >> tests.txt
          echo "Integration Test passed" >> tests.txt    
          cd ..     
          
      - name: Use the Upload Test Artifact GitHub Action
        uses: actions/upload-artifact@v2
        with: 
          name: publish-test-artifacts
          path: downloads    
    
  
  Deploy_to_Stagging:
  
      needs: Publish_Artifact
      runs-on: ubuntu-18.04
          
      steps:
       - name: Checkout
         uses: actions/checkout@v2

         # Setup gcloud CLI
       - uses: google-github-actions/setup-gcloud@v0.2.0
         with:
           service_account_key: ${{ secrets.GKE_SA_KEY }}
           project_id: ${{ secrets.GKE_PROJECT }}
      
       - run: |-
          gcloud --quiet auth configure-docker
        
         # Get the GKE credentials so we can deploy to the cluster
       - uses: google-github-actions/get-gke-credentials@v0.2.1
         with:
          cluster_name: ${{ secrets.GKE_CLUSTER }}
          location: ${{ secrets.GKE_ZONE }}
          credentials: ${{ secrets.GKE_SA_KEY }}
       
       # Deploy the Docker image to the GKE cluster
       - name: Deploy 
         run: |-          
          kubectl apply -f ./service2-deployment.yaml 
          kubectl apply -f ./service2-service.yaml  
          kubectl apply -f ./service1-deployment.yaml          
          kubectl apply -f ./service1-service.yaml
        
       - name: Create a temporary artifact downloads folder
         run: mkdir downloads 
         
       - name: SmokeTest       
         run: |            
          chmod +x ./smokeTest/smoke-services.sh
          chmod +x ./smokeTest/smoke.sh        
          ./smokeTest/smoke-services.sh >> downloads/smokeArtifact.txt                    
          echo "End to End Test passed" >> downloads/smokeArtifact.txt    
          
          
       - name: Use the Upload Smoke Artifact GitHub Action
         uses: actions/upload-artifact@v2
         with: 
          name: publish-Smoke-artifacts
          path: downloads
  
  Deploy_to_Production:
      needs: Deploy_to_Stagging
      runs-on: ubuntu-18.04
      steps:
         - name: Deploy to Producion
           run: echo "Deploy to Productions 
      
      #deploying on same cluster doesn't make sense, not sure what is expected, to make another cluster ,connect to it,
      #and deploy there ?
      
        
